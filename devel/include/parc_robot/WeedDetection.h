// Generated by gencpp from file parc_robot/WeedDetection.msg
// DO NOT EDIT!


#ifndef PARC_ROBOT_MESSAGE_WEEDDETECTION_H
#define PARC_ROBOT_MESSAGE_WEEDDETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <parc_robot/Weed.h>

namespace parc_robot
{
template <class ContainerAllocator>
struct WeedDetection_
{
  typedef WeedDetection_<ContainerAllocator> Type;

  WeedDetection_()
    : weeds()  {
    }
  WeedDetection_(const ContainerAllocator& _alloc)
    : weeds(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::parc_robot::Weed_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::parc_robot::Weed_<ContainerAllocator> >> _weeds_type;
  _weeds_type weeds;





  typedef boost::shared_ptr< ::parc_robot::WeedDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::parc_robot::WeedDetection_<ContainerAllocator> const> ConstPtr;

}; // struct WeedDetection_

typedef ::parc_robot::WeedDetection_<std::allocator<void> > WeedDetection;

typedef boost::shared_ptr< ::parc_robot::WeedDetection > WeedDetectionPtr;
typedef boost::shared_ptr< ::parc_robot::WeedDetection const> WeedDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::parc_robot::WeedDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::parc_robot::WeedDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::parc_robot::WeedDetection_<ContainerAllocator1> & lhs, const ::parc_robot::WeedDetection_<ContainerAllocator2> & rhs)
{
  return lhs.weeds == rhs.weeds;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::parc_robot::WeedDetection_<ContainerAllocator1> & lhs, const ::parc_robot::WeedDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace parc_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::parc_robot::WeedDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::parc_robot::WeedDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::parc_robot::WeedDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::parc_robot::WeedDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::parc_robot::WeedDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::parc_robot::WeedDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::parc_robot::WeedDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "845a4e3a48d0573bc750910e15745135";
  }

  static const char* value(const ::parc_robot::WeedDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x845a4e3a48d0573bULL;
  static const uint64_t static_value2 = 0xc750910e15745135ULL;
};

template<class ContainerAllocator>
struct DataType< ::parc_robot::WeedDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "parc_robot/WeedDetection";
  }

  static const char* value(const ::parc_robot::WeedDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::parc_robot::WeedDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A list of detected weeds\n"
"Weed[] weeds\n"
"\n"
"\n"
"================================================================================\n"
"MSG: parc_robot/Weed\n"
"# A weed in the field\n"
"float64 latitude\n"
"float64 longitude\n"
;
  }

  static const char* value(const ::parc_robot::WeedDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::parc_robot::WeedDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.weeds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WeedDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::parc_robot::WeedDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::parc_robot::WeedDetection_<ContainerAllocator>& v)
  {
    s << indent << "weeds[]" << std::endl;
    for (size_t i = 0; i < v.weeds.size(); ++i)
    {
      s << indent << "  weeds[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::parc_robot::Weed_<ContainerAllocator> >::stream(s, indent + "    ", v.weeds[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PARC_ROBOT_MESSAGE_WEEDDETECTION_H
